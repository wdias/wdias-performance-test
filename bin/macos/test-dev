#!/bin/bash
set -e
# Features:
# - Should be able to run cases separately Import, Export, Extension & All
# - Shold be able to toggle tst for Scalar, Vector & Grid
# - Should be able to run dev and production mode

test_run() {
  # usage: $progName run <DATA_TYPE> <REQ_TYPE>
  source "${BASH_SOURCE%/*}/test.conf"
  DATA_TYPE=$(get-data-type $1)
  REQ_SIZE=$(get-req-size $2)
  echo "Running performance test (${ENV}): DataType=${DATA_TYPE}, ReqSize=${REQ_SIZE}"

  ${JMETER} -n -t wdias_performance_test.jmx -l testresults.jtl -j non-ui.log -JDataType=${DATA_TYPE} -JreqSize=${REQ_SIZE}
}

test_once() {
  # usage: $progName once <DATA_TYPE> <REQ_TYPE> <SEARCH_PHASE>
  source "${BASH_SOURCE%/*}/test.conf"
  DATA_TYPE=$(get-data-type $1)
  REQ_SIZE=$(get-req-size $2)
  SEARCH_PHASE=$3
  [[ -z ${SEARCH_PHASE} ]] && echo "Search Phase should provide" && exit 1 || echo "Searching for WDIAS-${SEARCH_PHASE} test case"
  echo "Running  WDIAS-${SEARCH_PHASE} test once (${ENV}): DataType=${DATA_TYPE}, ReqSize=${REQ_SIZE}"
  $(toggle_enabled WDIAS-${SEARCH_PHASE} true)
  echo "Performing the test WDIAS-${SEARCH_PHASE} ..."
  ${JMETER} -n -t wdias_performance_test.jmx -l testresults.jtl -j non-ui.log -JDataType=${DATA_TYPE} -JreqSize=${REQ_SIZE}
  $(toggle_enabled WDIAS-${SEARCH_PHASE} false)
}

update_tst_feedback() {
  # usage: update_tst_feedback <SEARCH_PHASE> <TST_FEEDBACK_SUFFIX>
  # usage: update_tst_feedback WDIAS-Import import-prod-scalar
  SEARCH="\(tst-timer-.*\)}"
  VAR=TST_FEEDBACK_${2}
  REPLACE="tst-timer-${2}, ${!VAR})}"
  # Configure tst-timer for the concurrency thread group
  grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} expr {} + 3 | xargs -o -I {} sed -i '' "{}s/${SEARCH}/${REPLACE}/g" $JMETER_TEST_FILE
  # Configure Hold/Running time
  VAR_HOLD=TST_HOLD_${2}
  grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} expr {} + 6 | xargs -o -I {} sed -i '' "{}s/>.*</>${!VAR_HOLD}</g" $JMETER_TEST_FILE
}

toggle_enabled() {
  # usage: toggle_enabled <SEARCH_PHASE> <ENABLED>
  SEARCH=$([[ "$2" == "true" ]] && echo "false" || echo "true")
  REPLACE=$([[ "$2" == "true" ]] && echo "true" || echo "false")
  # https://stackoverflow.com/a/44864004/1461060
  grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} sed -i '' "{}s/${SEARCH}/${REPLACE}/g" $JMETER_TEST_FILE
}

test_enable() {
  # usage: $progName enable <MODULE> <DATA_TYPE>
  # (dev)  $progName enable <MODULE>
  source "${BASH_SOURCE%/*}/test.conf"
  MODULE=$(get-module $1)
  echo "Enabling module (${ENV}): Module=${MODULE} ..."
  $(toggle_enabled WDIAS-${MODULE} true)
  MODULE_L=$(echo "${MODULE}" | tr '[:upper:]' '[:lower:]')
  if [[ "${ENV}" == "prod" ]]; then
    DATA_TYPE_L=$(get-data-type $2) # if not found exit
    DATA_TYPE_L=$(echo "${DATA_TYPE_L}" | tr '[:upper:]' '[:lower:]')
    $(toggle_enabled tst-timer-${MODULE_L}_${ENV}_${DATA_TYPE_L} true)
    $(update_tst_feedback WDIAS-${MODULE} ${MODULE_L}_${ENV}_${DATA_TYPE_L})
  else
    $(toggle_enabled tst-timer-${MODULE_L}_${ENV} true)
    $(update_tst_feedback WDIAS-${MODULE} ${MODULE_L}_${ENV})
  fi
}

test_disable() {
  # usage: $progName enable <MODULE> <DATA_TYPE>
  # (dev)  $progName enable <MODULE>
  source "${BASH_SOURCE%/*}/test.conf"
  MODULE=$(get-module $1)
  echo "Disabling module (${ENV}): Module=${MODULE} ..."
  $(toggle_enabled WDIAS-${MODULE} false)
  MODULE_L=$(echo "${MODULE}" | tr '[:upper:]' '[:lower:]')
  if [[ "${ENV}" == "prod" ]]; then
    DATA_TYPE_L=$(get-data-type $2) # if not found, exit
    DATA_TYPE_L=$(echo "${DATA_TYPE_L}" | tr '[:upper:]' '[:lower:]')
    $(toggle_enabled tst-timer-${MODULE_L}_${ENV}_${DATA_TYPE_L} false)
    # Configure with dev
    $(update_tst_feedback WDIAS-${MODULE} ${MODULE_L}_dev)
  else
    $(toggle_enabled tst-timer-${MODULE_L}_${ENV} false)
    # Configure with dev
    $(update_tst_feedback WDIAS-${MODULE} ${MODULE_L}_dev)
  fi
}

test_help() {
  echo "-h | --help: Usage
  $progName enable <MODULE> <DATA_TYPE>
    - MODULE: import(i) | export(e) | extension(x) | all(a)
    - DATA_TYPE: scalar(s) | vector(v) | grid(g)
  $progName run <MODULE> <DATA_TYPE> <REQ_SIZE>
    - DATA_TYPE: scalar(s) | vector(v) | grid(g)
    - REQ_SIZE: 24(1) | 288(2) | 1044(3)
  NOTE: Modify test.conf as necessary
  e.g.
  $progName run import scalar 24
  or
  $progName run i s 1
  "
}

get-module() {
  case $1 in 
    Import|import|i)
      echo "Import"
    ;;
    Export|export|e)
      echo "Export"
    ;;
    Extension|extension|i)
      echo "Extension"
    ;;
    All|all|a)
      echo "All"
    ;;
    *)
      echo "Invalid module: $1 or module should be provided." >&2
      exit 1
    ;;
  esac
}
get-data-type(){
  case $1 in 
    Scalar|scalar|s)
      echo "Scalar"
    ;;
    Vector|vector|v)
      echo "Vector"
    ;;
    Grid|grid|g)
      echo "Grid"
    ;;
    *)
      echo "Invalid data type: $1 or data type should be provided." >&2
      exit 1
    ;;
  esac
}
get-req-size() {
  case $1 in 
    24|1) 
      echo "24"
    ;;
    288|2) 
      echo "288"
    ;;
    1044|3) 
      echo "1044"
    ;;
    *)
      echo "Invalid req size: $1 or req size should be provided." >&2
      exit 1
    ;;
  esac
}

test_cmd=$1
case $test_cmd in
  "" | "-h" | "--help")
    test_help
    ;;
  *)
    shift
    test_${test_cmd} $@
    if [ $? = 127 ]; then
      echo "'${test_cmd}' command not found." >&2
      echo "List available commands with '$progName --help'" >&2
      exit 1
    fi
    ;;
esac
