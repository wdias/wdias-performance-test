#!/bin/bash
set -e
# Features:
# - Should be able to run cases separately Import, Export, Extension & All
# - Should be able to run with different reqSize 24(1) | 288(2) | 1044(3)
# - Should be able to run dev and production mode

test_run() {
  # usage: $progName run <REQ_SIZE>
  source "${BASH_SOURCE%/*}/test.conf"
  REQ_SIZE=$(get-req-size $1)
  DISTRIBUTED_IPS=$([[ -n $SERVER_IPS ]] && echo "-R ${SERVER_IPS}" || echo "")
  echo "Running performance test (${ENV}): ReqSize=${REQ_SIZE} ${DISTRIBUTED_IPS}"

  ${JMETER} -n -t wdias_performance_test.jmx -j non-ui.log -JreqSize=${REQ_SIZE} ${DISTRIBUTED_IPS}
}

test_once() {
  # usage: $progName once <REQ_SIZE> <SEARCH_PHASE>
  # Enable matching test case and disable after run the test case
  source "${BASH_SOURCE%/*}/test.conf"
  REQ_SIZE=$(get-req-size $1)
  SEARCH_PHASE=$2
  [[ -z ${SEARCH_PHASE} ]] && echo "Search Phase should provide" && exit 1 || echo "Searching for WDIAS-${SEARCH_PHASE} test case"
  echo "Running  WDIAS-${SEARCH_PHASE} test once (${ENV}): ReqSize=${REQ_SIZE}"
  $(toggle_enabled WDIAS-${SEARCH_PHASE} true)
  DISTRIBUTED_IPS=$([[ -n $SERVER_IPS ]] && echo "-R ${SERVER_IPS}" || echo "")
  echo "Performing the test WDIAS-${SEARCH_PHASE} ... ${DISTRIBUTED_IPS}"
  ${JMETER} -n -t wdias_performance_test.jmx -j non-ui.log -JreqSize=${REQ_SIZE} ${DISTRIBUTED_IPS}
  $(toggle_enabled WDIAS-${SEARCH_PHASE} false)
}

update_tst_feedback() {
  # usage: update_tst_feedback <SEARCH_PHASE> <TST_FEEDBACK_SUFFIX>
  # usage: update_tst_feedback WDIAS-Import import-prod
  SEARCH="\(tst-timer-.*\)}"
  VAR=TST_FEEDBACK_${2}
  REPLACE="tst-timer-${2}, ${!VAR})}"
  # Configure tst-timer for the concurrency thread group
  if [ "${IS_UNIX:-0}" == "1" ]; then
    grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} expr {} + 3 | xargs -o -I {} sed -i "{}s/${SEARCH}/${REPLACE}/g" $JMETER_TEST_FILE
  else
    grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} expr {} + 3 | xargs -o -I {} sed -i '' "{}s/${SEARCH}/${REPLACE}/g" $JMETER_TEST_FILE
  fi
  # Configure Hold/Running time
  VAR_HOLD=TST_HOLD_${2}
  if [ "${IS_UNIX:-0}" == "1" ]; then
    grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} expr {} + 6 | xargs -o -I {} sed -i "{}s/>.*</>${!VAR_HOLD}</g" $JMETER_TEST_FILE
  else
    grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} expr {} + 6 | xargs -o -I {} sed -i '' "{}s/>.*</>${!VAR_HOLD}</g" $JMETER_TEST_FILE
  fi
}

toggle_enabled() {
  # usage: toggle_enabled <SEARCH_PHASE> <ENABLED>
  SEARCH=$([[ "$2" == "true" ]] && echo "false" || echo "true")
  REPLACE=$([[ "$2" == "true" ]] && echo "true" || echo "false")
  # https://stackoverflow.com/a/44864004/1461060
  if [ "${IS_UNIX:-0}" == "1" ]; then
    grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} sed -i "{}s/${SEARCH}/${REPLACE}/g" $JMETER_TEST_FILE
  else
    grep -Fn "$1" $JMETER_TEST_FILE | cut -f1 -d: | xargs -o -I {} sed -i '' "{}s/${SEARCH}/${REPLACE}/g" $JMETER_TEST_FILE
  fi
}

test_enable() {
  # usage: $progName enable <MODULE>
  source "${BASH_SOURCE%/*}/test.conf"
  MODULE=$(get-module $1)
  echo "Enabling module (${ENV}): Module=${MODULE} ..."
  $(toggle_enabled WDIAS-${MODULE} true)
  MODULE_L=$(echo "${MODULE}" | tr '[:upper:]' '[:lower:]')
  $(toggle_enabled tst-timer-${MODULE_L}_${ENV} true)
  $(update_tst_feedback WDIAS-${MODULE} ${MODULE_L}_${ENV})
}

test_disable() {
  # usage: $progName enable <MODULE>
  source "${BASH_SOURCE%/*}/test.conf"
  MODULE=$(get-module $1)
  echo "Disabling module (${ENV}): Module=${MODULE} ..."
  $(toggle_enabled WDIAS-${MODULE} false)
  MODULE_L=$(echo "${MODULE}" | tr '[:upper:]' '[:lower:]')
  $(toggle_enabled tst-timer-${MODULE_L}_${ENV} false)
  # Configure with dev
  $(update_tst_feedback WDIAS-${MODULE} ${MODULE_L}_dev)
}

test_help() {
  progName=`basename "$0"`
  echo "-h | --help: Usage
  $progName enable <MODULE>
    - MODULE: import(i) | export(e) | extension(x) | all(a)

  $progName run <REQ_SIZE>
    First need to enable module that need to be run 
    - REQ_SIZE: 24(1) | 288(2) | 1044(3)
    NOTE: Modify test.conf as necessary
    e.g.
    $progName run 24
    or
    $progName run 1

  $progName once <REQ_SIZE> <SEARCH_PHASE>
    This will enable the test case first. Then run the test case, and at the end disable and exit.
    - SEARCH_PHASE: Thread Group level name that matches
    e.g.
    $progName once 24 CreateExtensions
    or
    $progName once 1 CreateExtensions

  $progName disable <MODULE>
    - MODULE: import(i) | export(e) | extension(x) | all(a)
  "
}

get-module() {
  case $1 in 
    Import|import|i)
      echo "Import"
    ;;
    Export|export|e)
      echo "Export"
    ;;
    Extension|extension|i)
      echo "Extension"
    ;;
    All|all|a)
      echo "All"
    ;;
    Grid|grid|g)
      echo "Grid"
    ;;
    *)
      echo "Invalid module: $1 or module should be provided." >&2
      exit 1
    ;;
  esac
}
get-req-size() {
  case $1 in 
    24|1) 
      echo "24"
    ;;
    288|2) 
      echo "288"
    ;;
    1044|3) 
      echo "1044"
    ;;
    *)
      echo "Invalid req size: $1 or req size should be provided." >&2
      exit 1
    ;;
  esac
}

test_cmd=$1
case $test_cmd in
  "" | "-h" | "--help")
    test_help
    ;;
  *)
    shift
    test_${test_cmd} $@
    if [ $? = 127 ]; then
      echo "'${test_cmd}' command not found." >&2
      echo "List available commands with '$progName --help'" >&2
      exit 1
    fi
    ;;
esac
